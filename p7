import numpy as np
from numpy import array
def taylor (deriv ,x,y,xStop ,h):
    X = []
    Y = []
    X. append (x)
    Y. append (y)
    while x < xStop : 
        D = deriv (x,y)  
        H = 1.0
        for j in range (3): 
            H = H*h/(j + 1)
            y = y + D[j]*H
            x = x + h
            X. append (x)
            Y. append (y)
    return array (X),array (Y) # Convert lists into arrays
def deriv (x,y):
    D = np.zeros((4,1)) 
    D[0] = [2*y[0] + 3*np.exp(x)]
    D[1] = [4*y[0]+ 9*np.exp(x)]
    D[2] = [8*y[0]+ 21*np.exp(x)]
    D[3] = [16*y[0]+ 45*np.exp(x)]
    return D
x = 0.0  
xStop = 0.3 
y = array ([0.0])  
h = 0.1  
X,Y = taylor (deriv ,x,y,xStop ,h)
print ("The required values by Taylor's method are :\n at x= %0.2f , y=%0.5f,
\n at x=%0.2f , y=%0.5f,\n at x = %0.2f, y=%0.5f ,\n at x = %0.2f, y=%0.5f."
%(X[0],Y[0],X[1],Y[1],X[2],Y[2],X[3],Y[3] ))

 

import numpy as np
import matplotlib . pyplot as plt
def modified_euler (f, x0 , y0 , h, n):
    x = np. zeros (n+1)
    y = np. zeros (n+1)
    x[0] = x0
    y[0] = y0
    for i in range (n):
        x[i+1] = x[i] + h
        k1 = h * f(x[i], y[i])
        k2 = h * f(x[i+1], y[i] + k1)
        y[i+1] = y[i] + 0.5 * (k1 + k2)
    return x, y
def f(x, y):
    return x**2+y 
x0 = 0.0
y0 = 1.0
h = 0.05
n = 2
x, y = modified_euler (f, x0 , y0 , h, n)
print ("The required values by Modified Euler's method are :\n at x= %0.2f , 
y=%0.5f,\n at x= %0.2f , y=%0.5f,\n at x=%0.2f , y=%0.5f" %(x[0],y[0],x[1],y[
1],x[2],y[2]))
plt . plot (x, y, 'bo-')
plt . xlabel ('x')
plt . ylabel ('y')
plt . title ('Solution of dy/dx = x^2+y using Modified Euler \'s Method ')
plt . grid ( True )
plt . show ()


